---
author: "James O'Reilly"
title: "ISL Chapter 2: Statistical Learning"
output: html_notebook
---
Installing Packages.
```{r}
install.packages("ISLR")
```



In this lab, we will introduce some simple R commands. To create a vector of numbers, we use the function c() (for concatenate).

```{r}
x <- c(1, 2, 4, 5)
y <- c(3, 4, 5, 6)
length(x)
length(y)
x+y
```

The ls() function allows us to look at a list of all of the objects, such as data and functions, that we have saved so far. The rm() function can be used to delete any that we don’t want.

```{r}
ls()
rm(x,y)
ls()
```

It’s also possible to remove all objects at once:

```{r}
rm(list=ls())
```

The matrix() function can be used to create a matrix of numbers.

```{r}
x <- matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x
```

As this example illustrates, by default R creates matrices by successively filling in columns. Alternatively,
the byrow=TRUE option can be used to populate the matrix in order of the rows.

```{r}
matrix(c(1,2,3,4), 2, 2, byrow=TRUE)
```

We can apply functions to the entire matrix such as the sqrt() function or the ^2 function.

```{r}
sqrt(x)
x^2
```

The rnorm() function generates a vector of random normal variables,  with first argument n the sample size. Each time we call this function, we will get a different answer. Here we create two correlated sets of numbers, x and y, and use the cor() function to compute the correlation between them.

```{r}
x <- rnorm(50)
x
y <- x + rnorm(50, mean=50, sd=0.1)
y
cor(x,y)
```

By default, rnorm() creates standard normal random variables with a mean of 0 and a standard deviation of 1. However, the mean and standard deviation can be altered using the mean and sd arguments, as illustrated above.
Sometimes we want our code to reproduce the exact same set of random numbers; we can use the set.seed() function to do this. The set.seed() function takes an (arbitrary) integer argument.

```{r}
set.seed(1303)
rnorm(50)
```

The mean() and var() functions can be used to compute the mean and variance of a vector of numbers. Applying sqrt() to the output of var() will give the standard deviation. Or we can simply use the sd() function.

```{r}
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sd(y)
```

## Graphics

The plot() function is the primary way to plot data in R.  For instance, plot(x,y) produces a scatterplot of the numbers in x versus the numbers in y. There are many additional options that can be passed in to the plot() function. For example, passing in the argument xlab will result in a label on the x-axis. To find out more information about the plot() function, type ?plot.

```{r}
x=rnorm(100)
y=rnorm(100)
plot(x, y)
plot(x, y, xlab='x', ylab='y', main='Plot of x vs y')
```

We will often want to save the output of an R plot. The command that we use to do this will depend on the file type that we would like to create. For instance, to create a pdf, we use the pdf() function, and to create a jpeg, we use the jpeg() function. The function dev.off() indicates to R that we are done creating the plot.

```{r}
pdf("Figure.pdf")
plot(x, y, col="green")
dev.off()
```

The function seq() can be used to create a sequence of numbers. For instance, seq(a,b) makes a vector of integers between a and b. There are many other options: for instance, seq(0,1,length=10) makes a sequence of 10 numbers that are equally spaced between 0 and 1. Typing 3:11 is a shorthand for seq(3,11) for integer arguments.

```{r}
x=seq(1,10)
x
x=1:10
x
x=seq(-pi,pi,length =50)
x
```

We will now create some more sophisticated plots. The contour() function produces a contour plot in order to represent three-dimensional data; contour plot it is like a topographical map. It takes three arguments:
1. A vector of the x values
2. A vector of the y values
3. A matrix whose elements correspond to the z value for each pair of (x,y) coordinates

As with the plot() function, there are many other inputs which can be used to fine-tune the output of the contour function().

```{r}
y = x
f = outer(x, y, function(x, y)cos(y)/(1+x^2))
contour(x, y, f)
contour(x, y, f, nlevels=45, add=T)
fa = (f -t(f))/2
contour(x, y, fa, nlevels=45)
```

The image() function works the same way as contour(), except that it produces a color-coded plot whose colors depend on the z value. This is known as a heatmap, and is sometimes used to plot temperature in weather heatmap forecasts. Alternatively, persp() can be used to produce a three-dimensional plot. The arguments theta and phi control the angles at which the plot is viewed.

```{r}
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=50)
```

## Indexing Data
We often wish to examine part of a set of data. Suppose that our data is stored in the matrix A.

```{r}
A=matrix(1:16,4,4)
A
```

Then, typing

```{r}
A[2,3]
```

will select the element corresponding to the second row and the third column. The first number after the open-bracket symbol always refers to the row, and the second number always refers to the column. We can also
select multiple rows and columns at a time, by providing vectors as the indices.

```{r}
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
```

The last two examples include either no index for the columns or no index for the rows. These indicate that R should include all columns or all rows, respectively. R treats a single row or column of a matrix as a vector.

```{r}
A[1,]
```

The use of a negative sign in the index tells R to keep all rows or columns except those indicated in the index.

```{r}
A[-c(1,3),]
A[-c(1,3), -c(1,3,4)]
```

The dim() function outputs the number of rows followed by the number of columns of a given matrix.

```{r}
dim(A)
```

## Loading Data
For most analyses, the first step involves importing a data set into R. The read.table() function is one of the primary ways to do this. The help file contains details about how to use this function. We can use the function write.table() to export data. Before attempting to load a data set, we must make sure that R knows
to search for the data in the proper directory. However, the details of how to do this depend on the operating system (e.g. Windows, Mac, Unix) that is being used, and so we do not give further details here. We begin by loading in the Auto data set. This data is part of the ISLR library (we discuss libraries in Chapter 3) but to illustrate the read.table() function we load it now from a text file. The following command will load the Auto.data file into R and store it as an object called Auto, in a format referred to as a data frame. (The text file can be obtained from this book’s website.) Once the data has been loaded,
the fix() function can be used to view it in a spreadsheet like window. However, the window must be closed before further R commands can be entered.

```{r}
library(ISLR)
Auto=read.table("Auto.data.txt", header=T, na.strings="?")
```

The data set also includes a number of missing observations, indicated by a question mark ?. Missing values are a common occurrence in real data sets. Using the option header=T (or header=TRUE) in the read.table() function tells R that the first line of the file contains the variable names, and using the option na.strings tells R that any time it sees a particular character or set of characters (such as a question mark), it should be treated as a missing element of the data matrix.

Excel is a common-format data storage program. An easy way to load such data into R is to save it as a csv (comma separated value) file and then use the read.csv() function to load it in.

```{r}
Auto=read.csv("Auto.csv", header=T, na.strings = "?")
dim(Auto)
Auto[1:4,]
```

There are various ways to deal with the missing data. In this case, only five of the rows contain missing observations, and so we choose to use the na.omit() function to simply remove these rows.

```{r}
Auto=na.omit(Auto)
names(Auto)
```

## Additional Graphical and Numerical Summaries

We can use the plot() function to produce scatterplots of the quantitative variables. However, simply typing the variable names will produce an error message, because R does not know to look in the Auto data set for those variables. To refer to a variable, we must type the data set and the variable name joined with a $ symbol. Alternatively, we can use the attach() function in order to tell R to make the variables in this data frame available by name.

```{r}
plot(Auto$cylinders , Auto$mpg)
attach(Auto)
plot(cylinders, mpg)
```

The cylinders variable is stored as a numeric vector, so R has treated it as quantitative. However, since there are only a small number of possible values for cylinders, one may prefer to treat it as a qualitative variable. The as.factor() function converts quantitative variables into qualitative variables.

```{r}
cylinders=as.factor(cylinders)
```

If the variable plotted on the x-axis is categorial, then boxplots will automatically be produced by the plot() function. As usual, a number of options can be specified in order to customize the plots.

```{r warning=FALSE}
plot(cylinders, mpg, col="red", varwidth=T, horizontal=T)
```

The hist() function can be used to plot a histogram. Note that col=2 has the same effect as col="red".

```{r}
hist(mpg)
hist(mpg, col=2, breaks=15)
```

The pairs() function creates a scatterplot matrix i.e. a scatterplot for every pair of variables for any given data set. We can also produce scatterplots for just a subset of the variables.

```{r}
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
```

In conjunction with the plot() function, identify() provides a useful interactive method for identifying the value for a particular variable for points on a plot. We pass in three arguments to identify(): the x-axis
variable, the y-axis variable, and the variable whose values we would like to see printed for each point. Then clicking on a given point in the plot will cause R to print the value of the variable of interest. Right-clicking on the plot will exit the identify() function (control-click on a Mac). The numbers printed under the identify() function correspond to the rows forthe selected points.

```{r}
plot(horsepower, mpg)
identify(horsepower, mpg)
```

The summary() function produces a numerical summary of each variable in a particular data set.

```{r}
summary(Auto)
summary(mpg)
```



















